/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerinax - Azure Functions Extension Annotations'

configurations {
    balTools
    azureFunctionsBallerinaBirDir
    azureFunctionsBallerinaJar
}

dependencies {
    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
}

jar {
    enabled = false
}

clean {
    delete "$project.projectDir/output"
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

task unzip {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File(project.buildDir, "extracted-distribution/")
            }
        }
    }
}

def ballerinaToml = file("$project.projectDir/Ballerina.toml")
def semverMatcher = ballerinaToml.getText("UTF-8") =~ /(([0-9]+)\.([0-9]+)\.([0-9]+))/
def tomlSemver = semverMatcher[0][1]

def artifactAzureFunctionsBallerinaBirDir = file("$project.projectDir/target/caches/bir_cache/ballerinax")
def artifactAzureFunctionsBallerinaJar = file("$project.projectDir/target/caches/jar_cache/ballerinax/azure.functions/${tomlSemver}/ballerinax-azure.functions-${tomlSemver}.jar")

task ballerinaBuild {
    dependsOn unzip
    inputs.dir file(project.projectDir)
    doLast {
        def distributionBinPath = project.projectDir.absolutePath + "/build/extracted-distribution/jballerina-tools-${ballerinaLangVersion}/bin"
        exec {
            workingDir project.projectDir
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat doc azure.functions"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina doc azure.functions"
            }
        }
        copy {
            from file("$project.projectDir/target/apidocs/azure.functions")
            into file("$project.buildDir/apidocs/docs/azure.functions")
        }
        exec {
            workingDir project.projectDir
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat build -c -a --skip-tests"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina build -c -a --skip-tests"
            }
        }
        copy {
            from file("$project.projectDir/Ballerina.toml")
            into file("${artifactAzureFunctionsBallerinaBirDir}/azure.functions/${tomlSemver}")
        }
    }
    outputs.dir artifactAzureFunctionsBallerinaBirDir
    outputs.dir file("$project.buildDir/apidocs")
    outputs.file artifactAzureFunctionsBallerinaJar
}

artifacts {
    azureFunctionsBallerinaBirDir file: artifactAzureFunctionsBallerinaBirDir, builtBy: ballerinaBuild
    azureFunctionsBallerinaJar file: artifactAzureFunctionsBallerinaJar, builtBy: ballerinaBuild
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
}

build.dependsOn ballerinaBuild
